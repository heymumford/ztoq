"""\nCopyright (c) 2025 Eric C. Mumford (@heymumford)\nThis file is part of ZTOQ, licensed under the MIT License.\nSee LICENSE file for details.\n"""\n\nimport pytest\nfrom unittest.mock import patch, Mock\nfrom ztoq.utils import dependency_manager\n\n\n@pytest.mark.unit\nclass TestDependencyManager:\n    """Tests for the dependency_manager module."""\n\n    def test_is_dependency_installed(self):\n        """Test that is_dependency_installed checks if a dependency is installed."""\n        # This should always be true since pytest is installed in the testing environment\n        assert dependency_manager.is_dependency_installed("pytest") is True\n        # This should always be false for a non-existent package\n        assert dependency_manager.is_dependency_installed("nonexistent_package_12345") is False\n\n    @patch("ztoq.utils.dependency_manager.is_dependency_installed")\n    def test_check_dependencies(self, mock_is_installed):\n        """Test that check_dependencies returns the correct tuple."""\n        # Mock that all dependencies are installed\n        mock_is_installed.return_value = True\n        all_installed, missing = dependency_manager.check_dependencies(["dep1", "dep2"])\n        assert all_installed is True\n        assert missing == []\n\n        # Mock that one dependency is not installed\n        mock_is_installed.side_effect = [True, False]\n        all_installed, missing = dependency_manager.check_dependencies(["dep1", "dep2"])\n        assert all_installed is False\n        assert missing == ["dep2"]\n\n    @patch("ztoq.utils.dependency_manager.get_requirements")\n    @patch("ztoq.utils.dependency_manager.check_dependencies")\n    def test_check_all_project_dependencies(self, mock_check, mock_get_reqs):\n        """Test that check_all_project_dependencies calls the correct functions."""\n        mock_get_reqs.return_value = ["dep1", "dep2"]\n        mock_check.return_value = (True, [])\n\n        result = dependency_manager.check_all_project_dependencies()\n        mock_get_reqs.assert_called_once()\n        mock_check.assert_called_once_with(["dep1", "dep2"])\n        assert result == (True, [])\n\n    @patch("ztoq.utils.dependency_manager.get_optional_dependencies")\n    @patch("ztoq.utils.dependency_manager.is_dependency_installed")\n    def test_check_optional_dependency_group(self, mock_is_installed, mock_get_optionals):\n        """Test that check_optional_dependency_group returns the correct tuple."""\n        # Mock that the group exists and all dependencies are installed\n        mock_get_optionals.return_value = {"dev": ["pytest", "black"]}\n        mock_is_installed.return_value = True\n\n        all_installed, missing = dependency_manager.check_optional_dependency_group("dev")\n        assert all_installed is True\n        assert missing == set()\n\n        # Mock that the group doesn't exist\n        mock_get_optionals.return_value = {"dev": ["pytest", "black"]}\n        all_installed, missing = dependency_manager.check_optional_dependency_group("nonexistent")\n        assert all_installed is False\n        assert missing == set(["Group 'nonexistent' not found"])\n\n        # Mock that the group exists but some dependencies are not installed\n        mock_get_optionals.return_value = {"dev": ["pytest", "black"]}\n        mock_is_installed.side_effect = [True, False]\n\n        all_installed, missing = dependency_manager.check_optional_dependency_group("dev")\n        assert all_installed is False\n        assert missing == set(["black"])\n