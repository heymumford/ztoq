[tool.poetry]
name = "ztoq"
version = "0.4.1"
description = "A Python tool that extracts test data from Zephyr Scale and migrates it to qTest"
authors = ["Eric C. Mumford (@heymumford)"]
readme = "README.md"
packages = [{include = "ztoq"}, {include = "scripts"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core dependencies
pyyaml = "^6.0"
pydantic = "^2.0"
requests = "^2.30.0"
typer = "^0.12.1"
rich = "^13.5.0"
fastapi = "^0.115.12"
jsonschema = "^4.20.0"
sqlalchemy = "^2.0.40"
alembic = "^1.15.2"
pandas = "^2.2.3"
numpy = "^2.2.4"
psycopg2-binary = "^2.9.10"
responses = "^0.25.7"
tqdm = "^4.67.1"
matplotlib = "^3.10.1"
seaborn = "^0.13.2"
psutil = ">=6.1.0,<6.2.0"
uvicorn = "^0.34.1"
# Testing and development
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
mypy = "^1.15.0"
tox = "^4.26.0"
httpx = "^0.28.1"
types-pyyaml = "^6.0.12.20250402"
types-requests = "^2.32.0.20250328"
ruff = "^0.11.5"
pre-commit = "^4.2.0"
safety = "^3.3.1"
interrogate = "^1.5.0"
radon = "^6.0.1"
xenon = "^0.9.0"
pytest-benchmark = "^4.0.0"
# Documentation
sphinx = "^8.2.3"
sphinx-rtd-theme = "^3.0.2"
recommonmark = "^0.7"
myst-parser = "^4.0.1"
sphinx-autoapi = "^3.6.0"
pygments = "^2.19.0"
docutils = "^0.20.0"
plantuml = "^0.3.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "system: marks tests as system tests",
    "docker: marks tests related to Docker functionality",
    "acceptance: marks tests as acceptance tests for CLI commands",
]

[tool.poetry.scripts]
ztoq = "ztoq.cli:run_cli"
ztoq_post_install = "scripts.post_install:main"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

# flake8 configuration moved to setup.cfg

[tool.ruff]
line-length = 100
target-version = "py311"
# Format code using the rules compatible with Black
respect-gitignore = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",   # pyflakes
    # Pycodestyle
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    # Isort
    "I",   # isort
    # Pylint
    "PL",  # pylint
    # Pyupgrade
    "UP",  # pyupgrade
    # Flake8-bugbear
    "B",   # flake8-bugbear
    # Flake8-comprehensions
    "C",   # flake8-comprehensions
    # Flake8-simplify
    "SIM", # flake8-simplify
    # Flake8-bandit
    "S",   # flake8-bandit
    # PEP-8 Naming
    "N",   # pep8-naming
    # Flake8-builtins
    "A",   # flake8-builtins
    # Flake8-print
    "T",   # flake8-print
    # Pytest Style
    "PT",  # flake8-pytest-style
    # Return statements
    "RET", # flake8-return
    # Docstrings
    "D",   # pydocstyle
    # Type annotations
    "ANN", # flake8-annotations
    # Ruff-specific rules
    "RUF", # ruff-specific rules
    # String formatting
    "F",   # string formatting
    # Imports
    "ICN", # import conventions
    "G",   # logging format
    "INP", # implicit namespace packages
    "PIE", # pie rules
    "Q",   # quotes
    "TID", # tidy imports
    "TCH", # type checking
    "RSE", # raise statement
    "COM", # commas
    "ERA", # eradicate commented-out code
]
ignore = [
    "E501",  # line too long (handled by ruff format)
    "S101",  # use of assert (acceptable in test files)
    "B008",  # function call in argument defaults (common pattern in FastAPI)
    "N815",  # mixed-case variable in class scope (common in SQLAlchemy models)
    "T201",  # print statements (acceptable in CLI tools)
    "S104",  # possible binding to all interfaces (acceptable in dev context)
    "E402",  # module level import not at top of file (acceptable after license headers)
    "D100",  # Missing module docstring (we use module-level docstrings selectively)
    "D104",  # Missing docstring in package (we use __init__.py for imports)
    "D200",  # One-line docstring should fit on one line
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "D415",  # First line should end with a period, question mark, or exclamation point
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "PLC1901", # Compare to empty string
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR0912", # Too many branches
    "PLR0911", # Too many return statements
    "PLC0414", # Useless import alias
]
# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Allow assert in tests
    "S105",  # Allow hardcoded passwords in tests
    "S106",  # Allow hardcoded password arguments in tests
    "T201",  # Allow print in tests
    "B011",  # Allow assert False in tests
    "PT012", # Allow pytest.raises() without match
    "ANN",   # Allow missing type annotations in tests
    "D",     # Allow missing docstrings in tests
    "N802",  # Allow function names with uppercase characters (like testCamelCase)
    "PLR2004", # Allow magic numbers in tests
    "PLW0603", # Allow global statements in tests
    "E402",  # Allow module level imports not at top in tests
]

"scripts/**/*.py" = [
    "S101",  # Allow assert in scripts
    "S103",  # Allow file permissions in scripts
    "S104",  # Allow binding to all interfaces in scripts
    "S105",  # Allow hardcoded passwords in scripts
    "S106",  # Allow hardcoded password arguments in scripts
    "S602",  # Allow shell=True in scripts
    "S603",  # Allow subprocess in scripts
    "ANN",   # Allow missing type annotations in scripts
    "D",     # Allow missing docstrings in scripts
    "N806",  # Allow CONSTANT_CASE in functions
    "C901",  # Allow high complexity in scripts
    "PLW2901", # Allow loop variable reuse in scripts
    "E402",  # Allow module level imports not at top
]
"examples/**/*.py" = [
    "T201",  # Allow print in examples
    "ANN",   # Allow missing type annotations in examples
    "D",     # Allow missing docstrings in examples
    "S101",  # Allow assert in examples
    "S105",  # Allow hardcoded passwords in examples
    "S106",  # Allow hardcoded password arguments in examples
    "PLR2004", # Allow magic numbers in examples
]
"ztoq/cli.py" = [
    "T201",  # Allow print statements in CLI
    "ANN001", # Allow missing return type annotation in CLI (for click-decorated functions)
    "PLR0915", # Allow many statements in CLI
]
"ztoq/main.py" = [
    "T201",  # Allow print statements in main
    "E402",  # Allow imports after docstrings in main
]
"ztoq/**/*.py" = [
    "E402",  # Allow imports after docstrings in all ztoq modules
]
"config/scripts/**/*.py" = [
    "T201",  # Allow print statements in scripts
    "ANN",   # Allow missing type annotations in scripts
    "D",     # Allow missing docstrings in scripts
    "S",     # Allow security issues in scripts (these are development tools)
    "PLR2004", # Allow magic numbers in scripts
]
"alembic/**/*.py" = [
    "ANN",   # Allow missing type annotations in alembic
    "D",     # Allow missing docstrings in alembic
    "N",     # Allow naming violations in alembic
]

[tool.ruff.lint.isort]
known-first-party = ["ztoq"]
known-third-party = ["pydantic", "fastapi", "sqlalchemy", "pytest", "typer", "requests"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
disallow_any_generics = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
plugins = [
    "pydantic.mypy",
    # Temporarily disabled until sqlalchemy is installed
    # "sqlalchemy.ext.mypy.plugin",
]
exclude = [
    "^tests/.*$",
    "^config/scripts/.*$",
    "^scripts/.*$",
    "^examples/.*$",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "examples.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "config.scripts.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "rich.*",
    "typer.*",
    "fastapi.*",
    "sqlalchemy.*",
    "alembic.*",
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "seaborn.*",
    "jsonschema.*",
    "tqdm.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", "config/scripts"]
skips = ["B101"]  # Skip assert detection

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = true
fail-under = 80  # Minimum percentage of docstring coverage
exclude = ["tests", "venv", "config/scripts", "examples"]
verbose = 0
omit-covered-files = false

[tool.docformatter]
recursive = true
make-summary-multi-line = true
pre-summary-newline = true
wrap-descriptions = 80
wrap-summaries = 80
blank = true
black = true

[tool.pylint.master]
ignore = ["tests", "venv", "config/scripts"]
ignore-patterns = ["^\\.#"]
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "invalid-name",
]

[tool.pytest.benchmarks]
min-time = 0.1
min-rounds = 5
max-time = 1.0
timer = "time.perf_counter"
warmup = true

[tool.coverage.run]
source = ["ztoq"]
omit = ["tests/*", "venv/*", "config/scripts/*", "examples/*"]
branch = true
parallel = true
dynamic_context = "test_function"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "except ImportError:",
    "\\.\\.\\.",  # ellipsis in type stubs
]
show_missing = true
fail_under = 80
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
