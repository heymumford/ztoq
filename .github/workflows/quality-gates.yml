name: Quality Gates

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/dependabot.yml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files
          
      - name: Run ruff
        run: |
          poetry run ruff check .
        continue-on-error: true
          
      - name: Run mypy
        run: |
          poetry run mypy ztoq tests
        continue-on-error: true

  testing:
    name: Testing
    runs-on: ubuntu-latest
    needs: linting
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Run unit tests
        run: |
          poetry run pytest tests/unit -v --cov=ztoq --cov-report=xml:coverage.xml --cov-report=html
          
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov
            
      - name: Run integration tests
        run: |
          poetry run pytest tests/integration -v
          
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Run bandit
        run: |
          poetry run bandit -r ztoq -f json -o bandit-results.json
          poetry run bandit -r ztoq -f html -o bandit-results.html
        continue-on-error: true
          
      - name: Run safety check
        run: |
          poetry run safety check --json > safety-results.json
          poetry run safety check --output text > safety-results.txt
        continue-on-error: true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-results.json
            bandit-results.html
            safety-results.json
            safety-results.txt
            
      - name: Create issues for critical vulnerabilities
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          if grep -q "\"issue_severity\": \"HIGH\"\\|\"issue_severity\": \"CRITICAL\"" bandit-results.json; then
            echo "Creating issue for critical Bandit findings"
            gh issue create \
              --title "Critical security issues found by Bandit" \
              --body "Weekly security scan has found critical security issues. See the attached workflow run for details." \
              --label "security,high-priority"
          fi
          
          if grep -q "\"vulnerability_id\"" safety-results.json; then
            echo "Creating issue for Safety findings"
            gh issue create \
              --title "Security vulnerabilities found in dependencies" \
              --body "Weekly security scan has found vulnerable dependencies. See the attached workflow run for details." \
              --label "security,dependencies"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: testing
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}